{"version":3,"file":"app.bundle.js","mappings":"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AEM,kCAAqD;AACxD,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;;;;;;;;;;;;;;;ACjBM,kCAA0D;AAC7D;AACA;AACA,MAAIC,GAAG,CAAHA,MAAAA,IAAJ,KAAuB;AACnB;AAJyD,IAM7D;;;AACA,SAAOA,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,GAAAA,IAAP;AACH;;;;;;;;;;ACRD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/app/AppTypes.ts","webpack://template-feo-react-babel/./src/app/Controller.ts","webpack://template-feo-react-babel/./src/app/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/app/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/app/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/app/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/app/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/app/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/app/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/app/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/app/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/app/view/ExerciseTabularViewUsingContext.ts","webpack://template-feo-react-babel/./src/app/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/app/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/app/view/WorkoutsViewUsingContext.ts","webpack://template-feo-react-babel/./src/framework/CommonTypes.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/security/SecurityManager.ts","webpack://template-feo-react-babel/./src/framework/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/framework/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/framework/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/framework/socket/Types.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/GraphQLApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/BlockedUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogsView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchView.ts","webpack://template-feo-react-babel/./src/framework/ui/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/framework/ui/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/InputField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/BootstrapTableConfigHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/LimitedChoiceTextRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/CarouselViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/TabularViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/util/DurationFunctions.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/framework/util/MiscFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/mern-baseline/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport debug from 'debug';\nimport Controller from './app/Controller';\nimport UserSearchView from \"./framework/ui/chat/UserSearchView\";\nimport ChatLogsView from \"./framework/ui/chat/ChatLogsView\";\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./app/AppTypes\";\nimport {UnreadMessageCountListener} from \"./framework/socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./framework/ui/chat/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./framework/ui/chat/ChatRoomsSidebar\";\nimport ExerciseTypesSidebar from \"./app/sidebar/ExerciseTypesSidebar\";\nimport ChatLogDetailView from \"./framework/ui/chat/ChatLogDetailView\";\nimport FavouriteUserView from \"./framework/ui/chat/FavouriteUserView\";\nimport BlockedUserView from \"./framework/ui/chat/BlockedUserView\";\nimport {ExerciseTypesCompositeView} from \"./app/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./app/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./app/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./app/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./app/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./app/view/WorkoutsViewUsingContext\";\nimport {SecurityManager} from \"./framework/security/SecurityManager\";\n\nlocalStorage.debug = 'state-manager-graphql api-ts';\nlocalStorage.plugin = 'chat';\n\ndebug.log = console.info.bind(console);\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        //new WorkoutsView().onDocumentLoaded(); // carousel view\n        new WorkoutsViewUsingContext().onDocumentLoaded();\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(), {containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        SecurityManager.getInstance().onDocumentLoaded(NAVIGATION.logout);\n        Controller.getInstance().onDocumentLoaded();\n\n        const text:string = 'Fluffy';\n        const cipher = SecurityManager.getInstance().encryptString(text);\n        const decipher = SecurityManager.getInstance().decryptString(cipher);\n\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.hideAllSideBars();\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType: any) {\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = new UserSearchSidebar();\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = new ChatRoomsSidebar();\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n        this.chatSidebar.onDocumentLoaded();\n    }\n}\n\n\n$(function () {\n    App.getInstance().onDocumentLoad();\n});","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary: 'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n    logout: 'navigationItemLogout'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"../framework/state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../framework/state/StateChangeListener\";\nimport {StateManager} from \"../framework/state/StateManager\";\nimport SocketManager from \"../framework/socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"../framework/state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"../framework/state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"../framework/socket/ChatManager\";\nimport {NotificationController} from \"../framework/socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"../framework/state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../framework/model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"../framework/ui/helper/SimpleValueDataSource\";\nimport {KeyType} from \"../framework/ui/ConfigurationTypes\";\nimport {DataObjectListener} from \"../framework/model/DataObjectListener\";\nimport {DataObjectController} from \"../framework/model/DataObjectController\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"../framework/network/DownloadManager\";\nimport {GraphQLApiStateManager} from \"../framework/state/GraphQLApiStateManager\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true\n            },\n            {\n                stateName: STATE_NAMES.exerciseTypes,\n                serverURL: '',\n                api: API_Config.exerciseTypes,\n                isActive: true,\n                idField: '_id'\n            },\n            {\n                stateName: STATE_NAMES.workouts,\n                serverURL: '',\n                api: API_Config.workouts,\n                isActive: true,\n                idField: '_id'\n            }\n        ]);\n        let qlSM = GraphQLApiStateManager.getInstance();\n        qlSM.initialise([{\n            stateName: STATE_NAMES.exerciseTypes,\n            serverURL: '',\n            apiURL: '/graphql',\n            apis: {\n                findAll: 'query {getExerciseTypes {_id,name,type,sets,reps,duration,weight,distance,createdOn,createdBy,modifiedOn,modifiedBy}}',\n                create: 'mutation createExercise($data: ExerciseTypeInput!){addExerciseType(exercise: $data) {_id,name,type,sets,reps,duration,weight,distance,createdOn,createdBy,modifiedOn,modifiedBy}}',\n                destroy: 'mutation deleteExercise($identifier: String!){deleteExerciseType(id: $identifier)}',\n                update: 'mutation updateExercise($data: ExerciseTypeInput!){updateExerciseType(exercise: $data) }',\n                find: '',\n            },\n            data: {\n                findAll: 'getExerciseTypes',\n                create: 'addExerciseType',\n                destroy: 'updateExerciseType',\n                update: 'deleteExerciseType',\n                find: ''\n            },\n            isActive: true,\n            idField: '_id'\n        }])\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo);\n        let memorySM = new MemoryBufferStateManager(isSameMongo);\n\n        let asyncREST = new AsyncStateManagerWrapper(aggregateSM, restSM,isSameMongo);\n        let asyncQL = new AsyncStateManagerWrapper(aggregateSM,qlSM,isSameMongo);\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncREST, [STATE_NAMES.recentUserSearches,STATE_NAMES.exerciseTypes], false);\n        aggregateSM.addStateManager(asyncQL, [STATE_NAMES.recentUserSearches,STATE_NAMES.users,STATE_NAMES.workouts], false);\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n\n            // apply any queued changes from being offline\n            DownloadManager.getInstance().processOfflineItems();\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\n\n","import {ObjectPermissionChecker} from \"../framework/ui/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class CreatedByPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n}","import SocketListener from \"../framework/socket/SocketListener\";\nimport debug from 'debug';\n\nimport NotificationManager, {NotificationType} from \"../framework/notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSameMongo} from \"../framework/util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user});\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.info);\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import {Form} from \"../../framework/ui/form/Form\";\nimport {ConditionResponse, ValidationRule} from \"../../framework/ui/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../framework/ui/form/validation/ValidationManager\";\nimport {ComparisonType} from \"../../framework/CommonTypes\";\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n    }\n\n    public setupValidationForExerciseTypeDetailsForm(form: Form) {\n        let rule: ValidationRule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n    }\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../../framework/ui/view/interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../../framework/ui/view/interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../../framework/ui/view/interface/CollectionViewEventHandler\";\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart: Chart | null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order: 1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type: 'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength: boolean = true): string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background, border];\n    }\n\n}","import SidebarViewContainer from '../../framework/ui/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'currentWorkoutSidebar',\n        expandedSize: '50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from '../../framework/ui/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'exerciseTypesSidebar',\n        expandedSize: '50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from '../../framework/ui/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'workoutSummarySidebar',\n        expandedSize: '100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from \"../../framework/ui/container/SidebarViewContainer\";\nimport {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {BUTTON, INPUT, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../framework/ui/form/Form\";\nimport Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport MemoryBufferStateManager from \"../../framework/state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../../framework/state/StateChangeListener\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {DefaultPermissionChecker} from \"../../framework/ui/view/implementation/DefaultPermissionChecker\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\nimport {DataObjectListener} from \"../../framework/model/DataObjectListener\";\nimport {DataObjectController} from \"../../framework/model/DataObjectController\";\nimport moment from \"moment\";\nimport App from \"../../App\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener, DataObjectListener {\n    private sideBar: SidebarViewContainer;\n    private currentWorkout: any = {};\n    private workoutDef: DataObjectDefinition | null = null;\n    private readonly stateManager: StateManager;\n    private workoutNameEl: HTMLInputElement | null = null;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager(isSameMongo);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exerciseTypes, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts, this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutNameEl = <HTMLInputElement | null>document.getElementById(INPUT.workoutName);\n        this.workoutNameEl?.addEventListener('blur', (event) => {\n            if (event.target) {\n                // @ts-ignore\n                this.currentWorkout.name = event.target.value;\n                this.saveWorkout();\n            }\n        });\n\n\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error('Workout definition not found');\n\n        const exerciseTypes = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exerciseTypes, {containerId: VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseTypeDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail, exerciseTypeDefinition, new DefaultPermissionChecker());\n\n            let exerciseTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                }, exerciseTypeDetailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes, exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm: Form | null = exerciseTypeDetailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click', (event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n                    if (detailForm) {\n                        detailForm.reset();\n                        detailForm.setReadOnly();\n                    }\n                    this.saveWorkout();\n                    this.createWorkout();\n                    App.getInstance().hideAllSideBars();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout: any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                if (this.workoutNameEl && this.currentWorkout.name) this.workoutNameEl.value = this.currentWorkout.name;\n                this.stateManager.setStateByName(STATE_NAMES.exerciseTypes, this.currentWorkout.exercises, true);\n            } else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise: any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex, 1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise: any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex, 1, itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exerciseTypes, dataObj, false);\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exerciseTypes, dataObj, false);\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exerciseTypes, dataObj, false);\n    }\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        this.currentWorkout.name = '';\n        this.currentWorkout.completed = false;\n\n        if (this.workoutNameEl) this.workoutNameEl.value = '';\n        console.log(this.currentWorkout);\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts, this.currentWorkout, false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes, this.currentWorkout.exercises, true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n        this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n        this.currentWorkout.modifiedOn = moment().format('YYYYMMDDHHmmss');\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts, this.currentWorkout, false);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {ListViewRendererUsingContext} from \"../../framework/ui/view/renderer/ListViewRendererUsingContext\";\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    } else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'fas fa-trash-alt',\n                attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                    name: 'data-placement',\n                    value: \"right\"\n                }, {name: 'title', value: \"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager: StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.exerciseTypes, 'Exercise Types');\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        } else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../framework/ui/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../framework/model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {TabularViewRendererUsingContext} from \"../../framework/ui/view/renderer/TabularViewRendererUsingContext\";\n\nimport {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {TableUIConfig} from \"../../framework/ui/view/renderer/TableUITypeDefs\";\nimport {BootstrapTableConfigHelper} from \"../../framework/ui/helper/BootstrapTableConfigHelper\";\nimport {DisplayOrder} from \"../../framework/ui/form/FormUITypeDefs\";\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTabularViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElementType: 'tr',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'table-primary',\n            inactive: 'table-secondary',\n            active: 'table-success',\n            warning: 'table-danger'\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    } else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-trash-alt',\n                attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                    name: 'data-placement',\n                    value: \"right\"\n                }, {name: 'title', value: \"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            buttonClasses: 'btn bg-primary text-white btn-circle btn-md mr-1',\n            iconClasses: 'fas fa-arrow-alt-circle-right',\n            attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                name: 'data-placement',\n                value: \"right\"\n            }, {name: 'data-html', value: 'true'}, {\n                name: 'title',\n                value: \"Add this <strong>exercise</strong> to the current workout.\"\n            }]\n        }]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(ExerciseTabularViewUsingContext.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n\n        let exerciseTypeDef:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n        if (exerciseTypeDef) {\n            let displayOrders:DisplayOrder[] = [];\n            displayOrders.push({ fieldId:'name',displayOrder:1});\n            displayOrders.push({ fieldId:'type',displayOrder:2});\n            displayOrders.push({ fieldId:'duration',displayOrder:3});\n            displayOrders.push({ fieldId:'sets',displayOrder:4});\n            displayOrders.push({ fieldId:'reps',displayOrder:5});\n            displayOrders.push({ fieldId:'weight',displayOrder:6});\n            displayOrders.push({ fieldId:'distance',displayOrder:7});\n            let tableUIConfig:TableUIConfig = BootstrapTableConfigHelper.getInstance().generateTableRowConfig(exerciseTypeDef,displayOrders,1,true,true);\n            // change the text alignment for the exercise type, duration, sets, reps, and weight\n            tableUIConfig.headerColumns[1].element.elementClasses += ' text-center';\n            tableUIConfig.columns[1].elementClasses += ' text-center';\n            tableUIConfig.headerColumns[2].element.elementClasses += ' text-right';\n            tableUIConfig.columns[2].elementClasses += ' text-right';\n            tableUIConfig.headerColumns[3].element.elementClasses += ' text-right';\n            tableUIConfig.columns[3].elementClasses += ' text-right';\n            tableUIConfig.headerColumns[4].element.elementClasses += ' text-right';\n            tableUIConfig.columns[4].elementClasses += ' text-right';\n            tableUIConfig.headerColumns[5].element.elementClasses += ' text-right';\n            tableUIConfig.columns[5].elementClasses += ' text-right';\n            tableUIConfig.headerColumns[6].element.elementClasses += ' text-right';\n            tableUIConfig.headerColumns[6].element.innerHTML += ' (km)';\n            tableUIConfig.columns[6].elementClasses += ' text-right';\n\n            this.renderer = new TabularViewRendererUsingContext(this, this,tableUIConfig);\n            this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n            this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n            this.getItemId = this.getItemId.bind(this);\n\n            let context: ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.exerciseTypes, 'Exercise Types');\n            ContextualInformationHelper.getInstance().addActionToContext(context, 'addToWorkout', 'Add To Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-arrow-alt-circle-right');\n        }\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        } else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTabularViewUsingContext.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.type) {\n            if (item.type === 'cardio') {\n                return Modifier.warning;\n            } else {\n                return Modifier.inactive;\n            }\n        }\n        return Modifier.normal\n    }\n\n\n}\n\n","import SidebarViewContainer from \"../../framework/ui/container/SidebarViewContainer\";\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {CreatedByPermissionChecker} from \"../CreatedByPermissionChecker\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../framework/ui/form/Form\";\nimport Controller from \"../Controller\";\nimport debug from \"debug\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {ExerciseTypesViewUsingContext} from \"./ExerciseTypesViewUsingContext\";\nimport {ExerciseTabularViewUsingContext} from \"./ExerciseTabularViewUsingContext\";\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTabularViewUsingContext(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes, {containerId: ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail, exerciseTypeDefinition, new CreatedByPermissionChecker());\n\n            let exerciseTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                }, exerciseTypeDetailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes, exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder, false, true);\n\n            const detailForm: Form | null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n    }\n\n}\n\n","import AbstractStatefulCollectionView from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CarouselDOMConfig, KeyType, Modifier, RowPosition} from \"../../framework/ui/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../AppTypes\";\nimport Controller from \"../Controller\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\nimport debug from 'debug';\nimport moment from \"moment\";\nimport {addDurations} from \"../../framework/util/DurationFunctions\";\nimport {truncateString} from \"../../framework/util/MiscFunctions\";\nimport Chart from 'chart.js/auto';\nimport App from \"../../App\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {CarouselViewRendererUsingContext} from \"../../framework/ui/view/renderer/CarouselViewRendererUsingContext\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight: number,\n    distance: number,\n    duration: string\n}\n\ntype ChartRef = {\n    _id: string,\n    chart: Chart | null\n}\n\n\nexport class WorkoutsViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small: 1,\n            medium: 2,\n            large: 2,\n            xlarge: 2\n        },\n        rowContainer: {\n            elementClasses: \"carousel-item\",\n            elementType: 'div',\n        },\n        activeRow: {\n            elementType: '',\n            elementClasses: 'active',\n        },\n        activeRowPosition: RowPosition.last,\n        row: {\n            elementClasses: \"row\",\n            elementType: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            elementType: 'div',\n            elementClasses: 'col-sm-12 col-md-6 col-lg-6 mb-2',\n        },\n        actionContainer: {\n            elementType: 'div',\n            elementClasses: 'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElementType: 'div',\n            resultsClasses: 'card',\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal: 'bg-light',\n                inactive: 'bg-light',\n                active: 'bg-light',\n                warning: 'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElementType: 'div',\n                textElementClasses: '',\n                select: true,\n                delete: {\n                    buttonClasses: 'btn btn-danger btn-circle btn-md',\n                    iconClasses: 'fas fa-trash-alt text-white',\n                    attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                        name: 'data-placement',\n                        value: \"top\"\n                    }, {name: 'title', value: \"Delete this workout\"}]\n                },\n                background: {\n                    elementType: 'div',\n                    elementClasses: '',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    buttonText: '',\n                    buttonClasses: 'btn btn-primary btn-circle btn-md mr-2',\n                    iconClasses: 'fas fa-copy',\n                    attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                        name: 'data-placement',\n                        value: \"top\"\n                    }, {name: 'title', value: \"Add the exercises from this workout to the current workout.\"}]\n\n                },\n                {\n                    name: 'continue',\n                    buttonText: '',\n                    iconClasses: 'text-white fas fa-clipboard-list',\n                    buttonClasses: 'btn btn-warning btn-circle btn-md mr-2',\n                    attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                        name: 'data-placement',\n                        value: \"top\"\n                    }, {name: 'title', value: \"Continue this current workout\"}]\n                }\n            ],\n\n        },\n    }\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n    private static borderStrength = 'rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n    private chartRefs: ChartRef[];\n\n    constructor() {\n        super(WorkoutsViewUsingContext.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRendererUsingContext(this, this, WorkoutsViewUsingContext.DOMConfig);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.chartRefs = [];\n\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        this.hasPermissionToActionItemInNamedCollection = this.hasPermissionToActionItemInNamedCollection.bind(this);\n\n        let context: ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.workouts, 'Workouts');\n        ContextualInformationHelper.getInstance().addActionToContext(context, 'template', 'Copy exercises to Current Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-copy',this.hasPermissionToActionItemInNamedCollection);\n        ContextualInformationHelper.getInstance().addActionToContext(context, 'continue', 'Continue Current Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-clipboard-list',this.hasPermissionToActionItemInNamedCollection);\n\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        if (item.exercises) {\n            item.exercises.forEach((exercise: any) => {\n                buffer += `<strong>${exercise.name}</strong>: `;\n                if (exercise.type === 'cardio') {\n                    buffer += `${exercise.distance} km in ${exercise.duration}`;\n                } else {\n                    buffer += `${exercise.sets} sets of ${exercise.reps} reps in ${exercise.duration}`;\n                }\n                buffer += `<br/>`;\n            });\n        }\n        return buffer;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">`;\n        if (item.name) {\n            buffer += `${item.name}</h5>`;\n            buffer += `<h6 class=\"card-subtitle\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h6>`;\n        } else {\n            if (item.completed) {\n                buffer += `${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n            } else {\n                buffer += 'Current</h5>';\n            }\n\n        }\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0) buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        if (item.completed) {\n            return (item.completed === true);\n        }\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        /*\n        Remove a previous chart reference\n         */\n        let foundIndex = this.chartRefs.findIndex((ref: any) => ref._id === item._id);\n        if (foundIndex) {\n            //this.chartRefs[foundIndex].chart?.destroy();\n            logger(`Removing old chart reference for workout ${item._id}`);\n            this.chartRefs.splice(foundIndex, 1);\n        }\n\n\n        logger(`Rendering chart for`);\n        logger(item);\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            //browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels: string[] = [];\n            let data: any[] = [];\n            let bgColour: string[] = []\n            let brColour: string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsViewUsingContext.bgCardio);\n                    brColour.push(WorkoutsViewUsingContext.borderCardio);\n                } else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsViewUsingContext.bgStrength);\n                    brColour.push(WorkoutsViewUsingContext.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation: false,\n                    maintainAspectRatio: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n            try {\n                // @ts-ignore\n                let ref: ChartRef = {_id: item._id, chart: new Chart(canvas.getContext('2d'), config)};\n                this.chartRefs.push(ref);\n                containerEl.appendChild(canvas);\n            } catch (err) {\n                console.log(err);\n            }\n\n        }\n    }\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n    private calculateExerciseSummary(item: any): ExerciseSummary {\n        let result: ExerciseSummary = {\n            weight: 0,\n            distance: 0,\n            duration: '00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0; index < item.exercises.length; index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration, exercise.duration);\n            }\n        }\n        return result;\n    }\n\n\n}\n\n","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n}\n\nexport type FilterItem = {\n    attributeName:string,\n    comparison:ComparisonType,\n    value:any,\n    evaluator?:evaluatorFunction\n}\n\nexport type equalityFunction = (item1: any, item2: any) => boolean;\nexport type evaluatorFunction = (item: any, filter:FilterItem) => boolean;","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../app/Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners: DataObjectListener[];\n    protected isCreatingNew: boolean = false;\n    protected typeName: string;\n\n    protected constructor(typeName: string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener: DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    public startNewObject(): boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    public isCreatingNewObject(): boolean {\n        return this.isCreatingNew;\n    }\n\n    protected informListenersOfCreate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName, dataObj));\n    }\n\n    protected abstract _startNewObject(): boolean; // return false, if the creation was cancelled\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    collectionOfDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\n\nconst logger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                apiUtil.apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                apiUtil.apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                apiUtil.apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                apiUtil.apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport IndexedDBStateManager from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport DownloadManager from \"./DownloadManager\";\nimport {isSameMongo} from \"../util/EqualityFunctions\";\nimport NotificationManager, {NotificationType} from \"../notification/NotificationManager\";\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport AsynchronousStateManager from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","import Notification from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from \"debug\";\n\nconst logger = debug('security-manager');\n\nexport class SecurityManager {\n    private static _instance: SecurityManager;\n    private hash: string | null = null;\n    private logoutEl: HTMLElement | null = null;\n\n    private constructor() {\n    }\n\n    public static getInstance(): SecurityManager {\n        if (!(SecurityManager._instance)) {\n            SecurityManager._instance = new SecurityManager();\n        }\n        return SecurityManager._instance;\n    }\n\n    public onDocumentLoaded(logoutElementId: string) {\n        this.logoutEl = document.getElementById(logoutElementId);\n\n        // find the secret hash for the current user (if any)\n        const username = this.getLoggedInUsername();\n        if (username && username.trim().length > 0) {\n            logger(`found user ${username}`);\n            this.hash = localStorage.getItem(username);\n            if (this.hash) {\n                sessionStorage.setItem(username, this.hash);\n            } else {\n                this.hash = sessionStorage.getItem(username);\n            }\n            localStorage.removeItem(username);\n            logger(`found user ${username} hash - removed from local storage`);\n        }\n\n        if (this.logoutEl) {\n            this.logoutEl.addEventListener('click', (event) => {\n                localStorage.removeItem(username);\n                sessionStorage.removeItem(username);\n            });\n        }\n    }\n\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n\n    public encryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.encrypt(value, this.hash).toString();\n        }\n        return result;\n    }\n\n    public decryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.decrypt(value, this.hash).toString(CryptoJS.enc.Utf8);\n        }\n        return result;\n    }\n\n    public encryptObject(dataObj: any): string {\n        return this.encryptString(JSON.stringify(dataObj));\n    }\n\n    public decryptObject(value: string): any {\n        return JSON.parse(this.decryptString(value));\n    }\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\nimport {isSameRoom} from \"../util/EqualityFunctions\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true,true,isSameRoom);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager, {NotificationType} from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message, Priority} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, NotificationType.info, 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, NotificationType.info, 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                // provide visual notifications if do not disturb is not on, unless the message is marked priority\n                if (this.doNotDisturb && (displayMessage.priority !== Priority.Urgent)) return;\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, NotificationType.message, 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, NotificationType.warning, 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, NotificationType.priority, 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {StateEventType, StateManager, StateManagerType, StateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {ComparisonType, equalityFunction, FilterItem} from \"../CommonTypes\";\n\nconst smLogger = debug('state-manager-ts');\n\nexport type EqualityFnForName = {\n    name:string,\n    equality:equalityFunction\n}\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n    protected defaultEquality: equalityFunction;\n    protected equalityFns: EqualityFnForName[]|null = null;\n\n    protected constructor(managerName: string, defaultEquality:equalityFunction,fnPerState:EqualityFnForName[]|null = null) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.defaultEquality = defaultEquality;\n        if (fnPerState) {\n            this.equalityFns = fnPerState;\n        }\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    receivedFilterResults(name: string, filterResults: any): void {\n        this.delegate.informChangeListenersForStateWithName(name,filterResults,StateEventType.FilterResults, null);\n    }\n\n    protected getEqualityFnForName(name:string):equalityFunction {\n        let result = this.defaultEquality;\n        if (this.equalityFns) {\n            const foundIndex = this.equalityFns.findIndex((fn) => fn.name === name);\n            if (foundIndex >= 0) result = this.equalityFns[foundIndex].equality;\n        }\n        return result;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n    public abstract _addNewNamedStateToStorage(state: StateValue): void;\n    public abstract _replaceNamedStateInStorage(state: StateValue): void;\n    public abstract _getState(name: string): StateValue;\n    public abstract _saveState(name: string, stateObj: any): void;\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n    public abstract _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n    public abstract _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n\n    public _findItemsInState(name:string, filters:FilterItem[]): any[] { // default implementation assumes local values and simple comparisons\n        let results:any[] =  [];\n        const state:StateValue = this._getState(name);\n        try {\n            state.value.forEach((item:any) => {\n               let isMatch:boolean = true;\n               filters.forEach((filter) => {\n                   if (isMatch) { // don't bother with other filters if we have already failed\n\n                       let attributeValue = item[filter.attributeName];\n                       if (filter.evaluator) {\n                           isMatch = filter.evaluator(item, filter);\n                       }\n                       else {\n                           switch (filter.comparison) {\n                               case ComparisonType.isNull: {\n                                   isMatch = !(attributeValue);\n                                   break;\n                               }\n                               case ComparisonType.isNotNull: {\n                                   if (attributeValue) {\n                                       isMatch = true;\n                                   }\n                                   break;\n                               }\n                               case ComparisonType.equals: {\n                                   isMatch = ((attributeValue) && (attributeValue === filter.value));\n                                   break;\n                               }\n                               case ComparisonType.lessThan: {\n                                   isMatch = ((attributeValue) && (attributeValue < filter.value));\n                                   break;\n                               }\n                               case ComparisonType.greaterThan: {\n                                   isMatch = ((attributeValue) && (attributeValue > filter.value));\n                                   break;\n                               }\n                               case ComparisonType.lessThanEqual: {\n                                   isMatch = ((attributeValue) && (attributeValue <= filter.value));\n                                   break;\n                               }\n                               case ComparisonType.greaterThanEqual: {\n                                   isMatch = ((attributeValue) && (attributeValue >= filter.value));\n                                   break;\n                               }\n                           }\n                       }\n                   }\n               });\n               if (isMatch) results.push(item);\n            });\n        }\n        catch (err) {\n            smLogger(`filter, state value for ${state.name} is not any array`);\n        }\n        return results;\n    }\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: StateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, StateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: StateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: StateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, oldItem, StateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        this._ensureStatePresent(name);\n        return  this._findItemsInState(name,filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.Local;\n    }\n\n\n\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, StateValue} from \"./StateManager\";\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n\n    private stateManagers: managerWithFilters[];\n\n    public constructor(defaultEq:equalityFunction,equalityFns:EqualityFnForName[]|null = null) {\n        super('aggregate',defaultEq,equalityFns);\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): StateValue {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._findItemsInState(name,filters);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state.value;\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {StateManagerType, StateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager, defaultEq:equalityFunction) {\n        super('async',defaultEq);\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    public getType(): StateManagerType {\n        return this.wrappedSM.getType();\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        asyncLogger(`finding items with filters`);\n        return this.wrappedSM.findItemsInState(name,filters);\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): StateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: StateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: StateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n        asyncLogger(`Wrapped SM has supplied filter results ${name} passing to top level SM`);\n        this.topLevelSM.receivedFilterResults(name,filterResults);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {StateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst lsLogger = debug('browser-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n\n    protected storage: Storage;\n    protected allowPersistence: boolean;\n    // @ts-ignore\n    protected configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false, allowPersistence: boolean = false,defaultEq:equalityFunction,equalFns:EqualityFnForName[]|null = null) {\n        super('browser',defaultEq,equalFns);\n        this.storage = window.sessionStorage;\n        this.allowPersistence = allowPersistence;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): StateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) {\n            if (!this.allowPersistence) {\n                return;\n            }\n        }\n\n        let state: StateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\nimport {FilterItem} from \"../CommonTypes\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst logger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    serverURL: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean,\n    idField?: string\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    private static _instance: GraphQLApiStateManager;\n\n    private static FUNCTION_ID_ADD_ITEM = 'graphql.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'graphql.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'graphql.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'graphql.api.state.manager.get.items';\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public static getInstance() {\n        if (!(GraphQLApiStateManager._instance)) {\n            GraphQLApiStateManager._instance = new GraphQLApiStateManager();\n        }\n        return GraphQLApiStateManager._instance;\n    }\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(GraphQLApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: StateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): StateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callbackId: GraphQLApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                logger(`Getting All ${name} with query \"${query}\"`);\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: StateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL,config.apis.create,\n                {data: stateObj}, GraphQLApiStateManager.FUNCTION_ID_ADD_ITEM, name,false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item to ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let identifier = stateObj.id;\n            if (config.idField) {\n                identifier = stateObj[config.idField];\n            }\n\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL,config.apis.destroy,\n                {identifier: identifier}, GraphQLApiStateManager.FUNCTION_ID_UPDATE_ITEM, name,false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            DownloadManager.getInstance().addQLApiRequest(config.serverURL + config.apiURL,config.apis.update,\n                {data: stateObj}, GraphQLApiStateManager.FUNCTION_ID_REMOVE_ITEM, name,false);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            serverURL: '',\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], StateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncRemote;\n    }\n}","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {FilterItem} from \"../CommonTypes\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nclass IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n    }\n\n    public _getState(name: string): StateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, StateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncLocal;\n    }\n\n\n}\n\nexport default IndexedDBStateManager;","import debug from 'debug';\nimport {AbstractStateManager, EqualityFnForName} from './AbstractStateManager';\nimport {StateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: StateValue[];\n\n    public constructor(defaultEq:equalityFunction,equalFns:EqualityFnForName[]|null = null) {\n        super('memory',defaultEq,equalFns);\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: StateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): StateValue {\n        // @ts-ignore\n        let state: StateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\nimport {FilterItem} from \"../CommonTypes\";\n\n\nconst logger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: StateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): StateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: StateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n        }\n        logger(data);\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        logger(data);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(data);\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        // TO DO\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return this._findItemsInState(name,filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncRemote;\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (StateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.FilterResults): {\n                            listener.filterResults(this.managerName,name,stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {ComparisonType, evaluatorFunction, FilterItem} from \"../CommonTypes\";\n\nexport type StateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum StateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged,\n    FilterResults\n}\n\nexport enum StateManagerType {\n    Local,\n    AsyncLocal,\n    AsyncRemote\n}\n\n\n\nexport interface StateManager extends StateChangeInformer {\n    getType():StateManagerType;\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any): any;\n\n    findItemsInState(name:string, filters:FilterItem[]): any[];\n\n    isItemInState(name: string, item: any): boolean;\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: StateValue): void;\n\n    _getState(name: string): StateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: StateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _findItemsInState(name: string, filters:FilterItem[]): any[];\n}","export type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType: string,\n    elementAttributes?: Attribute[],\n    elementClasses: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElementType: string,\n    textElementClasses: string,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    buttonClasses: string,\n    buttonText?: string,\n    iconClasses: string,\n    attributes?: Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElementType: string,\n    resultsElementAttributes?: [Attribute],\n    resultsClasses: string,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../../app/AppTypes\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from '../view/interface/View';\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes: [DRAGGABLE.typeUser],\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../../app/Controller\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../../app/AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier, ViewDOMConfig} from \"../ConfigurationTypes\";\nimport {View} from '../view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport {CollectionView} from '../view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {\n    }\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../../app/AppTypes\";\nimport {isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor() {\n        super(ChatLogsView.DOMConfig, new MemoryBufferStateManager(isSameRoom), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameRoom(item1, item2);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n    selectChatRoom(roomName: string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n\n    showRequested(view: View): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs, newState, true);\n    }\n}\n\nexport default ChatLogsView;\n","import SidebarViewContainer from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'chatSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../../app/Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../../app/AppTypes\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch],\n                acceptTypes: [DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('', {})\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import SidebarViewContainer from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'userSearchSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame, isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../../app/Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../../app/AppTypes\";\nimport AbstractStatefulCollectionView from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    static fastSearchInputId: string = 'fastSearchUserNames';\n    static dataLimit: number = 10;\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true,false,isSameMongo);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value})) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n\n}\n\nexport default UserSearchView;\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener {\n    protected prefs: SidebarPrefs;\n    protected views: View[];\n\n    protected constructor(prefs: SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view: View, config: SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.elementType);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form, FormListener, AlertListener, FieldListener {\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement | null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields: Field[] = [];\n    protected map: AttributeFieldMapItem[];\n    protected isInitialised: boolean = false;\n    protected hasChangedBoolean: boolean = false;\n    protected isDisplayOnly: boolean = false;\n    protected id: string;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error(`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        this.id = v4();\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged(): boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    public abstract getFormattedDataObject(): any;\n\n    public initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            } else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                } else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Are you sure you want to delete this information?`, FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId: string): Field | undefined {\n        let result: Field | undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n            result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event: AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch (event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.clearReadOnly();\n        });\n    }\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate(): void;\n\n    protected abstract _startCreate(): void;\n\n    protected abstract _reset(): void;\n\n    protected abstract _visible(): void;\n\n    protected abstract _hidden(): void;\n\n    protected abstract _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void;\n\n    protected abstract _displayOnly(): void;\n\n    protected abstract _isSameObjectAsDisplayed(dataObj: any): boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void;\n\n    protected abstract _saveFinishedOrAborted(): void;\n\n    protected abstract _saveIsActive(): void;\n\n    protected abstract clearUnsavedMessage(): void;\n\n    protected abstract setUnsavedMessage(): void;\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef: FieldDefinition): FieldUIConfig | null | undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result: FieldUIConfig | null | undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index++;\n            }\n        }\n        return result;\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(), ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n\n}","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        } else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef, displayOrder, hasDeleteButton, hideModifierFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result: string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId) || (currentObjId && !suppliedObjId)) {\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled', 'true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled', 'true');\n            this.factoryElements.submitButton.setAttribute('disabled', 'true');\n        }\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target: Form,\n    formId: string,\n    eventType: FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event: FormEvent, formValues?: any): boolean; // return true to cancel the action\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid: boolean,\n    message?: string,\n    resetOnFailure: boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field: FieldDefinition, currentValue: string): any;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field: FieldDefinition, currentValue: string): string | null;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field: FieldDefinition, currentValue: string): string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field: FieldDefinition, formValues: string[]): boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup,\n    tableData\n}\n\nexport type FieldLabel = {\n    label: string,\n    attributes?: Attribute[],\n    classes?: string\n}\n\nexport type DescriptionText = {\n    message: string,\n    elementType: string,\n    elementClasses: string,\n}\n\nexport type DisplayOrder = {\n    fieldId: string,\n    displayOrder: number\n}\n\nexport type rendererFn = (fieldUIConfig:FieldUIConfig,value:string) => string;\n\nexport const defaultGetValue:rendererFn = (fieldUIConfig:FieldUIConfig,currentValue:string) => {\n    let result = currentValue;\n    if (fieldUIConfig.renderer) {\n        let value = fieldUIConfig.renderer.renderValue(fieldUIConfig.field, currentValue);\n        if (value) result = value;\n    }\n    return result;\n}\n\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder: number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?: {\n        container?: BasicElement,\n        label?: FieldLabel,\n        element: BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions,\n    getValue:rendererFn\n}\n\nexport type FieldGroup = {\n    containedBy?: BasicElement,\n    fields: FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id: string,\n    displayName: string,\n    classes?: string,\n    unsavedChanges: BasicElement,\n    fieldGroups: FieldGroup[],\n    buttonsContainedBy?: BasicElement\n    deleteButton?: BasicButtonElement,// should be clickable\n    cancelButton: BasicButtonElement,// should be clickable\n    submitButton: BasicButtonElement  // should be clickable\n    activeSave?: string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId: string,\n    attributeId: string\n}\n\nexport const DATA_ID_ATTRIBUTE: string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId, field, newValue));\n\n            }\n        }\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement: HTMLInputElement): string {\n        let newValue: string | null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        } else {\n            return '';\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement: HTMLElement, isValid: boolean, value: string, message: string | undefined = undefined, resetOnFailure: boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId, field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement: HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement, validationResp.isValid, value, validationResp.message, validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null): void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners, subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                    subElement.addEventListener('blur', eventHandler);\n                });\n\n            } else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker();\n            $(fieldElement).datepicker(\"option\", \"dateFormat\", 'dd/mm/yy');\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        } {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements: HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners, subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container: radioGroupElement,\n            radioButtons: subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields: HTMLTextAreaElement[],\n    selectFields: HTMLSelectElement[],\n    radioButtonGroups: {\n        container: HTMLElement,\n        radioButtons: HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    public createFormElements(form: Form, formListeners: FormListener[], formConfig: FormUIDefinition, fieldListeners: FieldListener[]): FormFactoryResponse {\n        let formEl: HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id', formConfig.id);\n        formEl.setAttribute('name', formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl, formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements: HTMLInputElement[] = [];\n        let formTAElements: HTMLTextAreaElement[] = [];\n        let formRBGElements: {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        }[] = [];\n        let formSelectElements: HTMLSelectElement[] = [];\n\n        let unsavedMessage: HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage, formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage, formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group: FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl, group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field: FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer: HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer, formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer, formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            } else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.deleteButton, FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.cancelButton, FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl: HTMLButtonElement = this.createFormButton(form, formConfig, formListeners, formConfig.submitButton, FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result: FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage: unsavedMessage,\n            fields: formInputElements,\n            selectFields: formSelectElements,\n            radioButtonGroups: formRBGElements,\n            textFields: formTAElements,\n            deleteButton: deleteButtonEl,\n            cancelButton: cancelButtonEl,\n            submitButton: submitButtonEl\n        }\n\n        return result;\n    }\n\n    private createFormButton(form: Form, formConfig: FormUIDefinition, formListeners: FormListener[], buttonDef: BasicButtonElement, eventType: FormEventType): HTMLButtonElement {\n        let buttonEl: HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl, buttonDef.buttonClasses);\n        buttonEl.setAttribute('id', `${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl, buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent: FormEvent = {\n                target: form,\n                formId: formConfig.id,\n                eventType: eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden: boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        } else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        } else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, false, '', message, false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId, this.definition, this.getValue(), message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = '' + newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl: HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0; index < selectEl.options.length; index++) {\n                        // @ts-ignore\n                        const option: HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue(): void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    }\n\n    valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n    }\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style', 'display:none');\n                }\n\n            } else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, true, '');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            } else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly', 'true');\n        this.element.setAttribute('disabled', 'true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly', 'true');\n                subElement.setAttribute('disabled', 'true');\n            });\n        }\n    }\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId, this.definition, value));\n        }\n    }\n}\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ComparisonType} from \"../../../CommonTypes\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId: string, field: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        logger(`Checking rules for form ${formId}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, false);\n\n        let result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            let ruleSubset: _ValidationRule[] = [];\n            rules.forEach((rule) => {\n                if (rule.response === onlyRulesOfType) {\n                    ruleSubset.push(rule);\n                }\n            });\n            rules = ruleSubset;\n        }\n\n\n        rules.forEach((rule) => { // we only want rules that make a field hidden\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id, true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits: string[] = values.split(',');\n            let foundInValue: boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed: false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field, values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                response.message = ruleCheck.message;\n                return false;\n            }\n            flogger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                flogger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string, includeSourceFields: boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    } else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n\n}","import {ComparisonType} from \"../../../CommonTypes\";\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?: string,\n    values?: string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId: string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {\n    defaultGetValue,\n    DisplayOrder,\n    FieldGroup,\n    FieldUIConfig,\n    FormUIDefinition,\n    UIFieldType\n} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition, displayOrders: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation: RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef, index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration): {\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    } else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder: DisplayOrder | undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue: number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder: displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n                getValue: defaultGetValue\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                        validator: fieldOperations,\n                        messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name: 'style', value: 'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave: '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a, b) => {\n                return (a.displayOrder - b.displayOrder);\n            })\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {defaultGetValue, DisplayOrder, FieldUIConfig, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\nimport {TableHeaderConfig, TableUIConfig} from \"../view/renderer/TableUITypeDefs\";\nimport {LimitedChoiceTextRenderer} from \"./LimitedChoiceTextRenderer\";\n\n\nconst logger = debug('bootstrap-tabular-config-helper');\n\nexport class BootstrapTableConfigHelper {\n\n    private static _instance: BootstrapTableConfigHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BootstrapTableConfigHelper {\n        if (!(BootstrapTableConfigHelper._instance)) {\n            BootstrapTableConfigHelper._instance = new BootstrapTableConfigHelper();\n        }\n        return BootstrapTableConfigHelper._instance;\n    }\n\n    public generateTableRowConfig(dataObjDef: DataObjectDefinition, displayOrders: DisplayOrder[], itemDetailColumn:number, hasActions: boolean, hideModifierFields: boolean = false): TableUIConfig {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let choiceRenderer: LimitedChoiceTextRenderer = new LimitedChoiceTextRenderer();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        let columnHeaderConfigs: TableHeaderConfig[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    } else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order, no order, no display for a table\n            const displayOrder: DisplayOrder | undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue: number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n\n                if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                    let headerConfig: TableHeaderConfig = {\n                        field: fieldDef,\n                        element: {\n                            elementType: 'th',\n                            elementAttributes: [{name: 'scope', value: 'col'}],\n                            elementClasses: '',\n                            innerHTML: fieldDef.displayName\n                        }\n                    }\n\n\n                    // construct the field ui config\n                    let fieldUIConfig: FieldUIConfig = {\n                        field: fieldDef,\n                        displayOrder: displayOrderValue,\n                        elementType: UIFieldType.tableData,\n                        elementClasses: 'text-center',\n                        renderer: fieldOperations,\n                        getValue: defaultGetValue\n                    }\n\n                    if (fieldDef.type === FieldType.limitedChoice) {\n                        fieldUIConfig.renderer = choiceRenderer;\n                    }\n\n                    columnHeaderConfigs.push(headerConfig);\n                    fieldUIConfigs.push(fieldUIConfig);\n\n                }\n            }\n        });\n\n        let actionColumn:TableHeaderConfig|null = null;\n        if (hasActions) {\n            actionColumn = {\n                element: {\n                    elementType: 'th',\n                    elementAttributes: [{name: 'scope', value: 'col'}],\n                    elementClasses: 'text-right',\n                    innerHTML: 'Actions'\n                }\n            }\n\n        }\n\n        const tableConfig: TableUIConfig = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            container: {\n                elementType: 'div',\n                elementClasses: 'table-responsive'\n            },\n            table: {\n                elementType: 'table',\n                elementClasses: 'table table-hover table-sm'\n            },\n            header: {\n                elementType: 'thead',\n                elementClasses: ''\n            },\n            headerColumns: columnHeaderConfigs,\n            body: {\n                elementType: 'tbody',\n                elementClasses: ''\n            },\n            columns: fieldUIConfigs,\n            itemDetailColumn: itemDetailColumn\n\n        }\n        // sort the fields into display order\n        tableConfig.columns.sort((a, b) => {\n            return (a.displayOrder - b.displayOrder);\n        });\n\n        if (actionColumn) {\n            tableConfig.actionColumn = actionColumn;\n        }\n\n        logger(tableConfig);\n        return tableConfig;\n    }\n}","import {FieldRenderer} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\n\nconst rlogger = debug('limited-choice-text-renderer');\n\n\nexport class LimitedChoiceTextRenderer implements FieldRenderer {\n\n    public constructor() {\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // find the current value in the data source and convert to text for display\n        let result = currentValue;\n        if (field.dataSource) {\n            const valueOptions = field.dataSource.getOptions();\n            const foundIndex = valueOptions.findIndex((option) => option.value === currentValue);\n            if (foundIndex >= 0) {\n                result = valueOptions[foundIndex].name;\n            }\n        }\n        return result;\n\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {    }\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller: DetailViewListener;\n\n    constructor(controller: DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view: DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view, dataObj);\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view, dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view, dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view, dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback: any;\n\n    constructor(callback: any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this, 'Discard Changes', 'There are unsaved changes.  Discard?', {});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener, DetailViewListener {\n    protected parentView: CollectionView;\n    protected children: DetailView[] = [];\n    protected delegate: ChildViewListenerDelegate;\n\n    constructor(typeName: string, parentView: CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView: DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise(): void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('', selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons: HTMLInputElement[] = [];\n\n    public constructor() {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        } else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate {\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        super(view, forwarder);\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n\n        const contextDetail: ContextDetails | null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context: ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId: contextDetail.identifier,\n                dataSource: contextDetail.source\n            }\n        } else {\n            context = {\n                itemId: '',\n                dataSource: this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n    abstract hasActionPermission(actionName:string, from:string, item:any):boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n}\n","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener, CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName: string) {\n        super(uiConfig, stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName, this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render(): void {\n        this.updateViewForNamedCollection(this.collectionName, this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show(): void {\n    }\n\n    hidden(): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","import {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return true;\n    }\n}","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem: any | null = null;\n    protected renderer: DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer: DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name: string, item: any) {\n        return '';\n    }\n\n    public getItemDescription(name: string, item: any): string {\n        return '';\n    }\n\n    public hasActionPermission(actionName:string, from:string, item:any):boolean {\n        return true;\n    }\n\n    public getItem(from:string,identifier:string):any {\n        return this.currentItem;\n    }\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        } else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName, selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder, hasDeleteButton, hideModifierFields)\n    }\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    RowPosition,\n    SCREEN_WIDTH_LARGE,\n    SCREEN_WIDTH_MEDIUM,\n    SCREEN_WIDTH_SMALL\n} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper, TogglePlacement} from \"../../context/ContextualInformationHelper\";\n\nconst logger = debug('carousel-renderer');\n\nexport class CarouselViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected config: CarouselDOMConfig;\n\n    private lastRenderedContainer: HTMLElement | null = null;\n    private lastRenderedCollectionName: string | null = null;\n    private lastRenderedCollection: any | null = null;\n    private previousWindowWidth: number = 0;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, config: CarouselDOMConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.config = config;\n    }\n\n    onDocumentLoaded(): void {\n        // we need to track window resizing\n        this.previousWindowWidth = window.innerWidth;\n\n        window.addEventListener('resize', (event) => {\n            const newWindowWidth = window.innerWidth;\n            let reRenderRequired: boolean = false;\n            if (newWindowWidth < this.previousWindowWidth) {\n                if (this.previousWindowWidth > SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth <= SCREEN_WIDTH_LARGE) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to large`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to medium`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth <= SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to small`);\n                    }\n                }\n            } else {\n                if (this.previousWindowWidth <= SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth > SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        logger(`window increased and is now larger than small`);\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                        logger(`window increased and is now larger than medium`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth > SCREEN_WIDTH_LARGE) {\n                        logger(`window increased and is now larger than large`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n            }\n            this.previousWindowWidth = newWindowWidth;\n            if (this.lastRenderedContainer && this.lastRenderedCollection && this.lastRenderedCollectionName && reRenderRequired) {\n                this.setDisplayElementsForCollectionInContainer(this.lastRenderedContainer, this.lastRenderedCollectionName, this.lastRenderedCollection);\n            }\n        });\n\n\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n\n        logger(`view ${this.view.getName()}: creating carousel item`);\n        logger(item);\n\n        const collectionConfig = this.view.getCollectionUIConfig();\n\n\n        let childEl: HTMLElement = document.createElement(collectionConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, collectionConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, collectionConfig.resultsElementAttributes);\n\n\n        if (collectionConfig.detail.background) {\n            let backgroundEl = document.createElement(collectionConfig.detail.background.elementType);\n            browserUtil.addRemoveClasses(backgroundEl, collectionConfig.detail.background.elementClasses);\n            browserUtil.addAttributes(backgroundEl, collectionConfig.detail.background.elementAttributes);\n            childEl.appendChild(backgroundEl);\n            this.view.renderBackgroundForItemInNamedCollection(backgroundEl, collectionName, item);\n        }\n\n\n        // the content may be structured\n        let textEl = childEl;\n        if (collectionConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, collectionConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(collectionConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, collectionConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (collectionConfig.extraActions || collectionConfig.detail.delete) {\n                let buttonsEl = document.createElement(this.config.actionContainer.elementType);\n                browserUtil.addRemoveClasses(buttonsEl, this.config.actionContainer.elementClasses);\n\n                contentEl.appendChild(buttonsEl);\n\n\n                if (collectionConfig.extraActions) {\n                    collectionConfig.extraActions.forEach((extraAction) => {\n                        const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                        if (hasPermissionForAction) {\n\n                            let action: HTMLElement = document.createElement('button');\n                            action.setAttribute('type', 'button');\n                            browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                            browserUtil.addAttributes(action, extraAction.attributes);\n                            if (extraAction.buttonText) {\n                                action.innerHTML = extraAction.buttonText;\n                            }\n                            if (extraAction.iconClasses) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                                iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                                action.appendChild(iconEl);\n                            }\n                            action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                            action.addEventListener('click', (event) => {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                this.eventHandler.eventActionClicked(event);\n                            });\n                            buttonsEl.appendChild(action);\n                        }\n                    });\n                }\n                if (collectionConfig.detail.delete && collectionConfig && canDeleteItem) {\n                    let deleteButtonEl: HTMLElement = document.createElement('button');\n                    deleteButtonEl.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(deleteButtonEl, collectionConfig.detail.delete.buttonClasses);\n                    browserUtil.addAttributes(deleteButtonEl, collectionConfig.detail.delete.attributes);\n                    if (collectionConfig.detail.delete.buttonText) {\n                        deleteButtonEl.innerHTML = collectionConfig.detail.delete.buttonText;\n                    }\n                    if (collectionConfig.detail.delete.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.detail.delete.iconClasses);\n                        deleteButtonEl.appendChild(iconEl);\n                    }\n                    deleteButtonEl.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventDeleteClickItem(event);\n                    });\n                    buttonsEl.appendChild(deleteButtonEl);\n                }\n\n            }\n\n            childEl.appendChild(contentEl);\n\n            if (collectionConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (collectionConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        const displayText = this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n        // add icons\n\n\n        // add modifiers for patient state\n        if (collectionConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    logger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal);\n                    if (collectionConfig.icons && collectionConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    logger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active);\n                    if (collectionConfig.icons && collectionConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    logger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive);\n                    if (collectionConfig.icons && collectionConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        logger(`view ${this.view.getName()}: creating carousel results`);\n        logger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // need to break the items up by row, and the last row is active (assumes increasing time order)\n        const numberOfResults = newState.length;\n\n        // number of items per row depends on view port\n        let itemsPerRow = this.config.itemsPerRow.xlarge;\n        if (window.innerWidth <= SCREEN_WIDTH_LARGE) {\n            itemsPerRow = this.config.itemsPerRow.large;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_MEDIUM) {\n            itemsPerRow = this.config.itemsPerRow.medium;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_SMALL) {\n            itemsPerRow = this.config.itemsPerRow.small;\n        }\n\n\n        const numberOfRows = Math.ceil(numberOfResults / itemsPerRow);\n        logger(`view ${this.view.getName()}: creating carousel with number of results per row of ${itemsPerRow} with rows ${numberOfRows}`);\n        for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n            // create the row\n            let rowContainerEl = document.createElement(this.config.rowContainer.elementType);\n            browserUtil.addRemoveClasses(rowContainerEl, this.config.rowContainer.elementClasses);\n            browserUtil.addAttributes(rowContainerEl, this.config.rowContainer.elementAttributes);\n            //browserUtil.addAttributes(rowContainerEl,[{name:'style',value:'display:block'}]);\n\n            let rowEl = document.createElement(this.config.row.elementType);\n            browserUtil.addRemoveClasses(rowEl, this.config.row.elementClasses);\n            browserUtil.addAttributes(rowEl, this.config.row.elementAttributes);\n            rowContainerEl.appendChild(rowEl);\n\n            // if this the active row?\n            if (((rowIndex === 0) && this.config.activeRowPosition === RowPosition.first) ||\n                ((rowIndex === (numberOfRows - 1)) && this.config.activeRowPosition === RowPosition.last)) {\n                browserUtil.addRemoveClasses(rowContainerEl, this.config.activeRow.elementClasses);\n                browserUtil.addAttributes(rowContainerEl, this.config.activeRow.elementAttributes);\n            }\n\n            let itemIndex = rowIndex * itemsPerRow;\n\n            while (itemIndex < ((rowIndex + 1) * itemsPerRow) && (itemIndex < numberOfResults)) {\n                logger(`rowIndex ${rowIndex} item index ${itemIndex}`);\n                const item = newState[itemIndex];\n\n\n                let itemContainerEl = rowEl;\n                if (this.config.multipleItemsPerRowContainer) {\n                    itemContainerEl = document.createElement(this.config.multipleItemsPerRowContainer.elementType);\n                    browserUtil.addRemoveClasses(itemContainerEl, this.config.multipleItemsPerRowContainer.elementClasses);\n                    browserUtil.addAttributes(itemContainerEl, this.config.multipleItemsPerRowContainer.elementAttributes);\n                    rowEl.appendChild(itemContainerEl);\n                }\n\n                const itemEl = this.createDisplayElementForCollectionItem(collectionName, item);\n                itemContainerEl.appendChild(itemEl);\n\n                ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, itemEl, true, TogglePlacement.bottom);\n                itemEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n\n                itemIndex++;\n            }\n\n\n            containerEl.appendChild(rowContainerEl);\n\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        this.lastRenderedContainer = containerEl;\n        this.lastRenderedCollectionName = collectionName;\n        this.lastRenderedCollection = newState;\n\n    }\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer, FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem: boolean;\n    protected containerId: string;\n    protected forwarder: DetailViewListenerForwarder | null;\n    protected view: DetailView | null;\n    protected permissionChecker: ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker: ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view: DetailView): void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void {\n        if (this.form) this.form.initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view, this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view, this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view, formattedObj);\n                    } else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view, formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {TableUIConfig} from \"./TableUITypeDefs\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst logger = debug('tabular-view-renderer-with-context');\n\nexport class TabularViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected tableConfig :TableUIConfig;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler,tableConfig:TableUIConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.tableConfig = tableConfig;\n    }\n\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        logger(`view ${this.view.getName()}: creating table row item`);\n        logger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let tableRowEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(tableRowEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(tableRowEl, uiConfig.resultsElementAttributes);\n\n\n        // we need to build the row from the displayed item values using the renderer if present\n        this.tableConfig.columns.forEach((column,index) => {\n\n            const fieldValue = column.getValue(column, item[column.field.id]);\n\n\n            let tdEl = document.createElement('td');\n            browserUtil.addRemoveClasses(tdEl, column.elementClasses);\n            browserUtil.addAttributes(tdEl, column.elementAttributes);\n\n\n            if ((index+1) === this.tableConfig.itemDetailColumn) {\n                // this column is different and can have many components\n                // the content may be structured\n                if (uiConfig.detail.containerClasses) {\n                    let contentEl: HTMLElement = document.createElement('div');\n                    browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n                    let textEl = document.createElement(uiConfig.detail.textElementType);\n                    browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElementClasses);\n                    // add the key ids for selection\n                    this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n                    contentEl.appendChild(textEl);\n\n                    if (uiConfig.detail.background) {\n                        let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                        browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                        imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                        contentEl.appendChild(imgEl);\n                    }\n\n\n                    if (uiConfig.detail.badge) {\n                        const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                        if (badgeValue > 0) {\n                            let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                            browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                            browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                            contentEl.appendChild(badgeEl);\n                            badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                        }\n                    }\n\n                    // add icons\n                    if (uiConfig.detail.icons) {\n                        const icons: string[] = uiConfig.detail.icons(collectionName, item);\n                        icons.forEach((icon) => {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, icon);\n                            contentEl.appendChild(iconEl);\n                        });\n                    }\n\n\n                    tdEl.appendChild(contentEl);\n\n                }\n            }\n            else {\n                tdEl.innerHTML = fieldValue;\n            }\n\n            tableRowEl.appendChild(tdEl);\n        });\n\n        // we add an extra column for any actions or the delete function\n        if (this.tableConfig.actionColumn) {\n            // create the extra table column\n            let tdEl = document.createElement('td');\n            browserUtil.addRemoveClasses(tdEl, this.tableConfig.actionColumn.element.elementClasses);\n            browserUtil.addAttributes(tdEl, this.tableConfig.actionColumn.element.elementAttributes);\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action, extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        tdEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                tdEl.appendChild(deleteButtonEl);\n            }\n\n            tableRowEl.appendChild(tdEl);\n            if (uiConfig.detail.drag) {\n                tableRowEl.setAttribute('draggable', 'true');\n                tableRowEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                tableRowEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    logger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        //textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                //textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                //textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    logger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        //textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                //textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    logger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        //textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(tableRowEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                //textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                //textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return tableRowEl;\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        logger(`view ${this.view.getName()}: creating Results`);\n        logger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // create the table\n        let tableEl = document.createElement(this.tableConfig.table.elementType);\n        browserUtil.addRemoveClasses(tableEl,this.tableConfig.table.elementClasses);\n        browserUtil.addAttributes(tableEl,this.tableConfig.table.elementAttributes);\n\n        // create the headers\n        let tableHeaderEl = document.createElement(this.tableConfig.header.elementType);\n        browserUtil.addRemoveClasses(tableHeaderEl,this.tableConfig.header.elementClasses);\n        browserUtil.addAttributes(tableHeaderEl,this.tableConfig.header.elementAttributes);\n\n\n\n        // create the column headers\n        this.tableConfig.headerColumns.forEach((header) => {\n            let thEl = document.createElement(header.element.elementType);\n            browserUtil.addRemoveClasses(thEl,header.element.elementClasses);\n            browserUtil.addAttributes(thEl,header.element.elementAttributes);\n            if (header.element.innerHTML) thEl.innerHTML = header.element.innerHTML;\n            tableHeaderEl.appendChild(thEl);\n        });\n\n        // create the action column header (if one)\n        if (this.tableConfig.actionColumn) {\n            let thEl = document.createElement(this.tableConfig.actionColumn.element.elementType);\n            browserUtil.addRemoveClasses(thEl,this.tableConfig.actionColumn.element.elementClasses);\n            browserUtil.addAttributes(thEl,this.tableConfig.actionColumn.element.elementAttributes);\n            if (this.tableConfig.actionColumn.element.innerHTML) thEl.innerHTML = this.tableConfig.actionColumn.element.innerHTML;\n            tableHeaderEl.appendChild(thEl);\n        }\n        tableEl.appendChild(tableHeaderEl);\n\n\n        // create the table body\n        let tableBodyEl = document.createElement(this.tableConfig.body.elementType);\n        browserUtil.addRemoveClasses(tableBodyEl,this.tableConfig.body.elementClasses);\n        browserUtil.addAttributes(tableBodyEl,this.tableConfig.body.elementAttributes);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            logger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            tableBodyEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        tableEl.appendChild(tableBodyEl);\n        containerEl.appendChild(tableEl);\n    }\n}","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string|undefined = undefined, isAdding: boolean = true): void {\n        if (classesText) {\n            const classes = classesText.split(' ');\n            classes.forEach((classValue) => {\n                if (classValue.trim().length > 0) {\n                    if (isAdding) {\n                        element.classList.add(classValue);\n                    } else {\n                        element.classList.remove(classValue);\n                    }\n                }\n            });\n        }\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export function addDurations(duration1: string, duration2: string): string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid: boolean = durationRegexp.test(duration1);\n    const duration2Valid: boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components: string[] = duration1.split(':');\n        const duration2Components: string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0) ? sumHours + ':' : ''}${(sumMinutes < 10) ? '0' + sumMinutes : sumMinutes}:${(sumSeconds < 10) ? '0' + sumSeconds : sumSeconds}`\n    } else {\n        return '00:00';\n    }\n}","\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","export function truncateString(str: string, num: number): string {\n    // If the length of str is less than or equal to num\n    // just return str--don't truncate it.\n    if (str.length <= num) {\n        return str\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...'\n}","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["localStorage","debug","console","logger","App","Controller","window","getInstance","getCurrentUser","onDocumentLoad","document","containerId","WorkoutSummarySidebar","container","ContextualInformationHelper","SecurityManager","NAVIGATION","text","cipher","decipher","hideAllSideBars","handleShowUserSearch","event","API_Config","handleShowWorkoutSummary","handleShowCurrentWorkout","handleShowExerciseTypes","handleShowChat","countChanged","buffer","newCount","addingExerciseToCurrentWorkout","STATE_NAMES","showCurrentWorkout","setupNavigationItemHandling","setupUserSearchViews","recentSearches","UserSearchSidebar","favouriteUsers","favourites","blockedUsers","blocked","setupChatViews","ChatRoomsSidebar","chatLogs","chatLogView","chatLog","$","Decorator","users","exerciseTypes","workouts","recentUserSearches","login","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","logout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","idField","qlSM","GraphQLApiStateManager","apiURL","apis","findAll","create","destroy","update","find","data","aggregateSM","memorySM","asyncREST","asyncQL","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","DownloadManager","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","delete","addExerciseToCurrentWorkout","copyOfExercise","v4","addWorkoutExercisesToCurrentWorkout","workout","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","filterResults","CreatedByPermissionChecker","hasPermissionToUpdateItem","item","hasPermissionToDeleteItem","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","_id","user","username","stateObj","NotificationManager","NotificationType","ValidationHelper","rule","targetDataFieldId","response","ConditionResponse","conditions","sourceDataFieldId","comparison","ComparisonType","values","ValidationManager","avLogger","WorkoutSummaryRenderer","currentChart","sevenWorkouts","newState","exerciseNames","exerciseBG","exerciseBR","labels","label","moment","exerciseName","exercise","foundIndex","colours","datasets","exerciseType","itemBG","itemBR","bg","br","didntFindExercise","dataset","backgroundColor","borderColor","borderWidth","order","lineDataSet","type","chartData","config","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","isStrength","red","blue","green","newColour","Math","transparency","background","border","CurrentWorkoutSidebar","SidebarViewContainer","SidebarPrefs","id","expandedSize","location","SidebarLocation","right","SidebarContainers","list","detail","ExerciseTypesSidebar","left","bottom","CurrentWorkoutCompositeView","workoutDef","workoutNameEl","exerciseTypeDetailRenderer","exerciseTypeDetailView","resultsContainerId","dataSourceId","viewLinker","startingDisplayOrder","detailForm","createExerciseType","managerName","newValue","itemRemoved","itemNewValue","CurrentWorkoutExercisesView","DOMConfig","viewConfig","drop","acceptFrom","acceptTypes","resultsElementType","resultsElementAttributes","resultsClasses","keyId","keyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElementType","textElementClasses","select","buttonClasses","iconClasses","attributes","getItemDescription","canDeleteItem","compareItemsForEquality","isSameMongo","getIdForItemInNamedCollection","renderDisplayForItemInNamedCollection","containerEl","hasPermissionToDeleteItemInNamedCollection","itemDropped","ExerciseTabularViewUsingContext","drag","from","extraActions","exerciseTypeDef","displayOrders","fieldId","displayOrder","tableUIConfig","BootstrapTableConfigHelper","context","selectedItem","itemAction","actionName","getModifierForItemInNamedCollection","Modifier","ExerciseTypesCompositeView","WorkoutSummaryView","hasPermissionToActionItemInNamedCollection","renderBackgroundForItemInNamedCollection","WorkoutsViewUsingContext","itemsPerRow","small","medium","large","xlarge","rowContainer","elementClasses","elementType","activeRow","activeRowPosition","RowPosition","row","multipleItemsPerRowContainer","actionContainer","collectionConfig","buttonText","bgStrength","bgCardio","borderStrength","borderCardio","getItemId","summary","ref","dataSourceKeyId","resultDataKeyId","canvas","bgColour","brColour","truncateString","chart","weight","distance","duration","index","addDurations","flogger","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","setSubElements","formatValue","field","currentValue","parseInt","parsed","parseFloat","isNaN","isValidValue","isValid","resetOnFailure","renderValue","generate","fieldValue","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","dataObjDef","fieldDef","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","displayOnly","DataObjectController","isCreatingNew","listener","definition","fieldOps","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","JSON","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","CallbackRegistry","callbacks","fn","defaultFn","processOfflineItems","OfflineManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","callbackId","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","jsonRequest","managerRequest","originalRequest","queueType","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","callbackForQueueRequest","queueId","element","httpStatus","initiateFetchForQueueItem","DB_NAME","OBJECT_STORE","indexedDB","keyField","Poller","offlineResults","INTERVAL_DEFAULT","URL_CALL","interval","isPollingBool","startPolling","delay","setInterval","isPolling","stopPolling","clearInterval","BootstrapNotification","Notification","show","topOffset","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","setTimeout","NotificationFactory","createNotification","notificationFactory","info","notification","notificationNode","parentEl","hash","logoutEl","sessionStorage","CryptoJS","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveUserList","favourite","savedLogs","receiveJoinedRoom","InviteType","log","created","joinDateTime","room","priority","receivedLeftRoom","receiveInvitation","invite","didChatAlreadyExist","happyToProceed","receiveLogin","receiveLogout","receiveDecline","receiveMessage","receiveQueuedInvites","invites","receiveQueuedMessages","messages","joinChat","leaveChat","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Priority","Normal","attachment","sent","roomName","lastViewed","numOfNewMessages","foundLog","unreadCount","notLogger","doNotDisturb","handleInvitationDeclined","handleNewInviteReceived","dontDisturbMe","isBlackedListed","isFavourited","handleChatLogsUpdated","handleChatLogUpdated","displayMessage","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","equalityFns","fnPerState","receivedFilterResults","StateEventType","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","addChangeListenerForName","results","isMatch","filters","attributeValue","filter","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","isItemInState","removeItemFromState","oldItem","updateItemInState","findItemsInState","getType","StateManagerType","aggLogger","AggregateStateManager","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_findItemsInState","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","configuration","useLocalStorage","allowPersistence","equalFns","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","setCompletedRun","runsComplete","identifier","Error","status","dataAttribute","IndexedDBStateManager","collection","openDB","upgrade","collections","db","keyPath","autoIncrement","blocking","terminated","saveWithCollectionKey","transaction","objectStore","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","stateObjectForName","getWithCollectionKey","cursor","getKeyFieldForKey","checkForObjectStore","saveItemsToCollection","saveData","removeAllItemsFromCollectionKey","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","callbackForAddItem","msManager","MemoryBufferStateManager","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","cancelHandler","vLogger","BlockedUserView","AbstractStatefulCollectionView","quickDelete","documentLoaded","itemDeleted","itemSelected","itemDragStarted","hideRequested","showRequested","getSecondaryModifierForItemInNamedCollection","updateViewForNamedCollection","droppedItem","itemDeselected","canSelectItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasActionPermission","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","handleAddMessage","messageContent","sentMessage","messageEl","browserUtil","fastSearchEl","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","myUsername","fastSearchValues","searchValue","source","disabled","minLength","getName","hidden","getDataSourceKeyId","getUIConfig","render","checkCanComment","clearChatLog","csLogger","ChatLogsView","badge","selectedChatLog","isSameRoom","selectChatRoom","updateStateManager","vLoggerDetail","FavouriteUserView","favUsers","UserSearchView","fastSearchInputId","dataLimit","sbvcLogger","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","addTooltip","placement","html","target","action","handler","hasPermission","elementDefinition","elementAttributes","icon","defaultType","internalType","actions","desc","parent","contexts","contextDef","collectionView","compareWith","itemEl","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","valueChanged","failedValidation","hideModifierFields","formEvent","formId","FormEventType","RESETTING","shouldCancelChange","CANCELLED","allFieldsValid","SAVE_ABORTED","formattedDataObject","SAVED","getId","getFieldFromDataFieldId","mapItem","completed","CANCELLING_ABORTED","DELETED","DELETE_ABORTED","clearReadOnly","setReadOnly","isDisplayingItem","isReadOnly","fieldGroup","uiConfig","BasicFormImplementation","factoryElements","getFormattedDataObject","formattedResult","subElements","dataId","fieldEl","fieldUIConfig","UIFieldType","attributeId","BootstrapFormConfigHelper","FormElementFactory","rbg","isSameObject","currentObjId","suppliedObjId","defaultGetValue","FormMode","DATA_ID_ATTRIBUTE","EditingEventListener","handleEvent","fieldElement","RenderingEventListener","processRendering","ValidationEventHandler","undefined","validationElementTarget","errorMessageDiv","errorMessageEl","processValidation","subElement","validationResp","DefaultFieldOptionsListener","optionsChanged","subEls","FieldInputElementFactory","fieldConfig","eventHandler","errorMessageDivEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","radioButtons","formEl","formConfig","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","group","buttonContainer","deleteButtonEl","cancelButtonEl","submitButtonEl","form","selectFields","radioButtonGroups","textFields","deleteButton","cancelButton","submitButton","buttonEl","buttonDef","iconEl","AbstractField","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","validator","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","hide","setValid","InputField","RadioButtonGroupField","SelectField","TextAreaField","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","sourceType","targetType","formRule","formRuleSet","rules","ruleFailed","ruleSubset","failedResponses","targetValue","sourceValue","check","splits","foundInValue","ruleCheck","ruleSet","fieldOperations","rbgFieldOperation","fieldUIConfigs","displayOrderValue","renderer","formatter","classes","messageDisplay","validClasses","invalidClasses","rows","cols","containedBy","fieldGroups","unsavedChanges","innerHTML","buttonsContainedBy","activeSave","a","b","choiceRenderer","columnHeaderConfigs","headerConfig","actionColumn","tableConfig","table","header","headerColumns","columns","itemDetailColumn","LimitedChoiceTextRenderer","ChildViewListenerDelegate","cancelled","deletedItem","saveNewItem","updateItem","ChangeDataObjectDelegate","LinkedCollectionDetailController","children","parentView","childView","canProceedWithSelection","confirm","canProceedWithCreateNew","RBGFieldOperations","radioButton","SimpleValueDataSource","addListener","getOptions","CollectionViewEventHandlerDelegate","getDragData","itemId","dataSource","eventStartDrag","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","AbstractView","CollectionViewEventHandlerDelegateUsingContext","contextDetail","CollectionViewListenerForwarder","DetailViewListenerForwarder","ViewListenerForwarder","avLoggerDetails","AbstractCollectionView","forwarder","getCollectionUIConfig","addEventCollectionListener","isSame","setRenderer","getItemInNamedCollection","DATA_SOURCE","droppedObjectType","droppedObjectFrom","acceptType","objectType","DefaultPermissionChecker","DetailViewImplementation","currentItem","addEventDetailListener","CarouselViewRendererUsingContext","lastRenderedContainer","lastRenderedCollectionName","lastRenderedCollection","previousWindowWidth","newWindowWidth","reRenderRequired","childEl","backgroundEl","textEl","buttonsEl","hasPermissionForAction","extraAction","displayText","modifier","secondModifier","numberOfResults","numberOfRows","rowIndex","rowContainerEl","rowEl","itemIndex","itemContainerEl","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","handleActionItem","formattedObj","ListViewRenderer","imgEl","badgeValue","badgeEl","ListViewRendererUsingContext","TabularViewRendererUsingContext","tableRowEl","column","tdEl","tableEl","tableHeaderEl","thEl","tableBodyEl","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","classesText","isAdding","classValue","addAttributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","duration1Valid","duration2Valid","duration1Components","duration1","duration2Components","duration2","carry","duration1Seconds","duration2Seconds","sumSeconds","duration1Minutes","duration2Minutes","sumMinutes","duration1Hours","duration2Hours","sumHours","item1","item2","str"],"sourceRoot":""}